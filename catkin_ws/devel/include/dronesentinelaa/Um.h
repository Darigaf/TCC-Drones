// Generated by gencpp from file dronesentinelaa/Um.msg
// DO NOT EDIT!


#ifndef DRONESENTINELAA_MESSAGE_UM_H
#define DRONESENTINELAA_MESSAGE_UM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dronesentinelaa
{
template <class ContainerAllocator>
struct Um_
{
  typedef Um_<ContainerAllocator> Type;

  Um_()
    : um(0.0)  {
    }
  Um_(const ContainerAllocator& _alloc)
    : um(0.0)  {
  (void)_alloc;
    }



   typedef float _um_type;
  _um_type um;





  typedef boost::shared_ptr< ::dronesentinelaa::Um_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dronesentinelaa::Um_<ContainerAllocator> const> ConstPtr;

}; // struct Um_

typedef ::dronesentinelaa::Um_<std::allocator<void> > Um;

typedef boost::shared_ptr< ::dronesentinelaa::Um > UmPtr;
typedef boost::shared_ptr< ::dronesentinelaa::Um const> UmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dronesentinelaa::Um_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dronesentinelaa::Um_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dronesentinelaa::Um_<ContainerAllocator1> & lhs, const ::dronesentinelaa::Um_<ContainerAllocator2> & rhs)
{
  return lhs.um == rhs.um;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dronesentinelaa::Um_<ContainerAllocator1> & lhs, const ::dronesentinelaa::Um_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dronesentinelaa

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dronesentinelaa::Um_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dronesentinelaa::Um_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dronesentinelaa::Um_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dronesentinelaa::Um_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dronesentinelaa::Um_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dronesentinelaa::Um_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dronesentinelaa::Um_<ContainerAllocator> >
{
  static const char* value()
  {
    return "618dab28f65c47698004ab746e672599";
  }

  static const char* value(const ::dronesentinelaa::Um_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x618dab28f65c4769ULL;
  static const uint64_t static_value2 = 0x8004ab746e672599ULL;
};

template<class ContainerAllocator>
struct DataType< ::dronesentinelaa::Um_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dronesentinelaa/Um";
  }

  static const char* value(const ::dronesentinelaa::Um_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dronesentinelaa::Um_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 um\n"
;
  }

  static const char* value(const ::dronesentinelaa::Um_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dronesentinelaa::Um_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.um);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Um_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dronesentinelaa::Um_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dronesentinelaa::Um_<ContainerAllocator>& v)
  {
    s << indent << "um: ";
    Printer<float>::stream(s, indent + "  ", v.um);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONESENTINELAA_MESSAGE_UM_H
